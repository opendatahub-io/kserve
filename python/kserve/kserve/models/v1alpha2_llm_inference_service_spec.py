# Copyright 2023 The KServe Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    KServe

    Python SDK for KServe  # noqa: E501

    The version of the OpenAPI document: v0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kserve.configuration import Configuration


class V1alpha2LLMInferenceServiceSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'base_refs': 'list[V1LocalObjectReference]',
        'model': 'V1alpha2LLMModelSpec',
        'parallelism': 'V1alpha2ParallelismSpec',
        'prefill': 'V1alpha2WorkloadSpec',
        'replicas': 'int',
        'router': 'V1alpha2RouterSpec',
        'template': 'V1PodSpec',
        'worker': 'V1PodSpec'
    }

    attribute_map = {
        'base_refs': 'baseRefs',
        'model': 'model',
        'parallelism': 'parallelism',
        'prefill': 'prefill',
        'replicas': 'replicas',
        'router': 'router',
        'template': 'template',
        'worker': 'worker'
    }

    def __init__(self, base_refs=None, model=None, parallelism=None, prefill=None, replicas=None, router=None, template=None, worker=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha2LLMInferenceServiceSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._base_refs = None
        self._model = None
        self._parallelism = None
        self._prefill = None
        self._replicas = None
        self._router = None
        self._template = None
        self._worker = None
        self.discriminator = None

        if base_refs is not None:
            self.base_refs = base_refs
        if model is not None:
            self.model = model
        if parallelism is not None:
            self.parallelism = parallelism
        if prefill is not None:
            self.prefill = prefill
        if replicas is not None:
            self.replicas = replicas
        if router is not None:
            self.router = router
        if template is not None:
            self.template = template
        if worker is not None:
            self.worker = worker

    @property
    def base_refs(self):
        """Gets the base_refs of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501

        BaseRefs allows inheriting and overriding configurations from one or more LLMInferenceServiceConfig instances. The controller merges these base configurations, with the current LLMInferenceService spec taking the highest precedence. When multiple baseRefs are provided, the last one in the list overrides previous ones.  # noqa: E501

        :return: The base_refs of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501
        :rtype: list[V1LocalObjectReference]
        """
        return self._base_refs

    @base_refs.setter
    def base_refs(self, base_refs):
        """Sets the base_refs of this V1alpha2LLMInferenceServiceSpec.

        BaseRefs allows inheriting and overriding configurations from one or more LLMInferenceServiceConfig instances. The controller merges these base configurations, with the current LLMInferenceService spec taking the highest precedence. When multiple baseRefs are provided, the last one in the list overrides previous ones.  # noqa: E501

        :param base_refs: The base_refs of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501
        :type: list[V1LocalObjectReference]
        """

        self._base_refs = base_refs

    @property
    def model(self):
        """Gets the model of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501


        :return: The model of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501
        :rtype: V1alpha2LLMModelSpec
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this V1alpha2LLMInferenceServiceSpec.


        :param model: The model of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501
        :type: V1alpha2LLMModelSpec
        """

        self._model = model

    @property
    def parallelism(self):
        """Gets the parallelism of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501


        :return: The parallelism of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501
        :rtype: V1alpha2ParallelismSpec
        """
        return self._parallelism

    @parallelism.setter
    def parallelism(self, parallelism):
        """Sets the parallelism of this V1alpha2LLMInferenceServiceSpec.


        :param parallelism: The parallelism of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501
        :type: V1alpha2ParallelismSpec
        """

        self._parallelism = parallelism

    @property
    def prefill(self):
        """Gets the prefill of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501


        :return: The prefill of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501
        :rtype: V1alpha2WorkloadSpec
        """
        return self._prefill

    @prefill.setter
    def prefill(self, prefill):
        """Sets the prefill of this V1alpha2LLMInferenceServiceSpec.


        :param prefill: The prefill of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501
        :type: V1alpha2WorkloadSpec
        """

        self._prefill = prefill

    @property
    def replicas(self):
        """Gets the replicas of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501

        Number of replicas for the deployment.  # noqa: E501

        :return: The replicas of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this V1alpha2LLMInferenceServiceSpec.

        Number of replicas for the deployment.  # noqa: E501

        :param replicas: The replicas of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def router(self):
        """Gets the router of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501


        :return: The router of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501
        :rtype: V1alpha2RouterSpec
        """
        return self._router

    @router.setter
    def router(self, router):
        """Sets the router of this V1alpha2LLMInferenceServiceSpec.


        :param router: The router of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501
        :type: V1alpha2RouterSpec
        """

        self._router = router

    @property
    def template(self):
        """Gets the template of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501


        :return: The template of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501
        :rtype: V1PodSpec
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this V1alpha2LLMInferenceServiceSpec.


        :param template: The template of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501
        :type: V1PodSpec
        """

        self._template = template

    @property
    def worker(self):
        """Gets the worker of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501


        :return: The worker of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501
        :rtype: V1PodSpec
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """Sets the worker of this V1alpha2LLMInferenceServiceSpec.


        :param worker: The worker of this V1alpha2LLMInferenceServiceSpec.  # noqa: E501
        :type: V1PodSpec
        """

        self._worker = worker

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha2LLMInferenceServiceSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha2LLMInferenceServiceSpec):
            return True

        return self.to_dict() != other.to_dict()
