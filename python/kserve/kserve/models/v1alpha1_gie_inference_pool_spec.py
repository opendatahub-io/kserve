# Copyright 2023 The KServe Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    KServe

    Python SDK for KServe  # noqa: E501

    The version of the OpenAPI document: v0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kserve.configuration import Configuration


class V1alpha1GIEInferencePoolSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "extension_ref": "V1alpha1Extension",
        "selector": "dict(str, str)",
        "target_port_number": "int",
    }

    attribute_map = {
        "extension_ref": "extensionRef",
        "selector": "selector",
        "target_port_number": "targetPortNumber",
    }

    def __init__(
        self,
        extension_ref=None,
        selector=None,
        target_port_number=0,
        local_vars_configuration=None,
    ):  # noqa: E501
        """V1alpha1GIEInferencePoolSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._extension_ref = None
        self._selector = None
        self._target_port_number = None
        self.discriminator = None

        if extension_ref is not None:
            self.extension_ref = extension_ref
        self.selector = selector
        self.target_port_number = target_port_number

    @property
    def extension_ref(self):
        """Gets the extension_ref of this V1alpha1GIEInferencePoolSpec.  # noqa: E501


        :return: The extension_ref of this V1alpha1GIEInferencePoolSpec.  # noqa: E501
        :rtype: V1alpha1Extension
        """
        return self._extension_ref

    @extension_ref.setter
    def extension_ref(self, extension_ref):
        """Sets the extension_ref of this V1alpha1GIEInferencePoolSpec.


        :param extension_ref: The extension_ref of this V1alpha1GIEInferencePoolSpec.  # noqa: E501
        :type: V1alpha1Extension
        """

        self._extension_ref = extension_ref

    @property
    def selector(self):
        """Gets the selector of this V1alpha1GIEInferencePoolSpec.  # noqa: E501

        Selector defines a map of labels to watch model server pods that should be included in the InferencePool. In some cases, implementations may translate this field to a Service selector, so this matches the simple map used for Service selectors instead of the full Kubernetes LabelSelector type. If sepecified, it will be applied to match the model server pods in the same namespace as the InferencePool. Cross namesoace selector is not supported.  # noqa: E501

        :return: The selector of this V1alpha1GIEInferencePoolSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this V1alpha1GIEInferencePoolSpec.

        Selector defines a map of labels to watch model server pods that should be included in the InferencePool. In some cases, implementations may translate this field to a Service selector, so this matches the simple map used for Service selectors instead of the full Kubernetes LabelSelector type. If sepecified, it will be applied to match the model server pods in the same namespace as the InferencePool. Cross namesoace selector is not supported.  # noqa: E501

        :param selector: The selector of this V1alpha1GIEInferencePoolSpec.  # noqa: E501
        :type: dict(str, str)
        """
        if (
            self.local_vars_configuration.client_side_validation and selector is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `selector`, must not be `None`"
            )  # noqa: E501

        self._selector = selector

    @property
    def target_port_number(self):
        """Gets the target_port_number of this V1alpha1GIEInferencePoolSpec.  # noqa: E501

        TargetPortNumber defines the port number to access the selected model servers. The number must be in the range 1 to 65535.  # noqa: E501

        :return: The target_port_number of this V1alpha1GIEInferencePoolSpec.  # noqa: E501
        :rtype: int
        """
        return self._target_port_number

    @target_port_number.setter
    def target_port_number(self, target_port_number):
        """Sets the target_port_number of this V1alpha1GIEInferencePoolSpec.

        TargetPortNumber defines the port number to access the selected model servers. The number must be in the range 1 to 65535.  # noqa: E501

        :param target_port_number: The target_port_number of this V1alpha1GIEInferencePoolSpec.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and target_port_number is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `target_port_number`, must not be `None`"
            )  # noqa: E501

        self._target_port_number = target_port_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict())
                            if hasattr(item[1], "to_dict")
                            else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1GIEInferencePoolSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1GIEInferencePoolSpec):
            return True

        return self.to_dict() != other.to_dict()
