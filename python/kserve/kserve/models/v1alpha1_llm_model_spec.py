# Copyright 2023 The KServe Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    KServe

    Python SDK for KServe  # noqa: E501

    The version of the OpenAPI document: v0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kserve.configuration import Configuration


class V1alpha1LLMModelSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'criticality': 'str',
        'lora': 'V1alpha1LoRASpec',
        'name': 'str',
        'uri': 'KnativeURL'
    }

    attribute_map = {
        'criticality': 'criticality',
        'lora': 'lora',
        'name': 'name',
        'uri': 'uri'
    }

    def __init__(self, criticality=None, lora=None, name=None, uri=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1LLMModelSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._criticality = None
        self._lora = None
        self._name = None
        self._uri = None
        self.discriminator = None

        if criticality is not None:
            self.criticality = criticality
        if lora is not None:
            self.lora = lora
        if name is not None:
            self.name = name
        self.uri = uri

    @property
    def criticality(self):
        """Gets the criticality of this V1alpha1LLMModelSpec.  # noqa: E501

        Criticality defines how important it is to serve the model compared to other models. This is used by the Inference Gateway scheduler.  # noqa: E501

        :return: The criticality of this V1alpha1LLMModelSpec.  # noqa: E501
        :rtype: str
        """
        return self._criticality

    @criticality.setter
    def criticality(self, criticality):
        """Sets the criticality of this V1alpha1LLMModelSpec.

        Criticality defines how important it is to serve the model compared to other models. This is used by the Inference Gateway scheduler.  # noqa: E501

        :param criticality: The criticality of this V1alpha1LLMModelSpec.  # noqa: E501
        :type: str
        """

        self._criticality = criticality

    @property
    def lora(self):
        """Gets the lora of this V1alpha1LLMModelSpec.  # noqa: E501


        :return: The lora of this V1alpha1LLMModelSpec.  # noqa: E501
        :rtype: V1alpha1LoRASpec
        """
        return self._lora

    @lora.setter
    def lora(self, lora):
        """Sets the lora of this V1alpha1LLMModelSpec.


        :param lora: The lora of this V1alpha1LLMModelSpec.  # noqa: E501
        :type: V1alpha1LoRASpec
        """

        self._lora = lora

    @property
    def name(self):
        """Gets the name of this V1alpha1LLMModelSpec.  # noqa: E501

        Name is the name of the model as it will be set in the \"model\" parameter for an incoming request. If omitted, it will default to `metadata.name`. For LoRA adapters, this field is required.  # noqa: E501

        :return: The name of this V1alpha1LLMModelSpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1alpha1LLMModelSpec.

        Name is the name of the model as it will be set in the \"model\" parameter for an incoming request. If omitted, it will default to `metadata.name`. For LoRA adapters, this field is required.  # noqa: E501

        :param name: The name of this V1alpha1LLMModelSpec.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def uri(self):
        """Gets the uri of this V1alpha1LLMModelSpec.  # noqa: E501


        :return: The uri of this V1alpha1LLMModelSpec.  # noqa: E501
        :rtype: KnativeURL
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this V1alpha1LLMModelSpec.


        :param uri: The uri of this V1alpha1LLMModelSpec.  # noqa: E501
        :type: KnativeURL
        """
        if self.local_vars_configuration.client_side_validation and uri is None:  # noqa: E501
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1LLMModelSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1LLMModelSpec):
            return True

        return self.to_dict() != other.to_dict()
