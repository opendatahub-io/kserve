# Copyright 2023 The KServe Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    KServe

    Python SDK for KServe  # noqa: E501

    The version of the OpenAPI document: v0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kserve.configuration import Configuration


class V1alpha2ParallelismSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data': 'int',
        'data_local': 'int',
        'data_rpc_port': 'int',
        'expert': 'bool',
        'pipeline': 'int',
        'tensor': 'int'
    }

    attribute_map = {
        'data': 'data',
        'data_local': 'dataLocal',
        'data_rpc_port': 'dataRPCPort',
        'expert': 'expert',
        'pipeline': 'pipeline',
        'tensor': 'tensor'
    }

    def __init__(self, data=None, data_local=None, data_rpc_port=None, expert=None, pipeline=None, tensor=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha2ParallelismSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._data = None
        self._data_local = None
        self._data_rpc_port = None
        self._expert = None
        self._pipeline = None
        self._tensor = None
        self.discriminator = None

        if data is not None:
            self.data = data
        if data_local is not None:
            self.data_local = data_local
        if data_rpc_port is not None:
            self.data_rpc_port = data_rpc_port
        if expert is not None:
            self.expert = expert
        if pipeline is not None:
            self.pipeline = pipeline
        if tensor is not None:
            self.tensor = tensor

    @property
    def data(self):
        """Gets the data of this V1alpha2ParallelismSpec.  # noqa: E501

        Data parallelism size.  # noqa: E501

        :return: The data of this V1alpha2ParallelismSpec.  # noqa: E501
        :rtype: int
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this V1alpha2ParallelismSpec.

        Data parallelism size.  # noqa: E501

        :param data: The data of this V1alpha2ParallelismSpec.  # noqa: E501
        :type: int
        """

        self._data = data

    @property
    def data_local(self):
        """Gets the data_local of this V1alpha2ParallelismSpec.  # noqa: E501

        DataLocal data local parallelism size.  # noqa: E501

        :return: The data_local of this V1alpha2ParallelismSpec.  # noqa: E501
        :rtype: int
        """
        return self._data_local

    @data_local.setter
    def data_local(self, data_local):
        """Sets the data_local of this V1alpha2ParallelismSpec.

        DataLocal data local parallelism size.  # noqa: E501

        :param data_local: The data_local of this V1alpha2ParallelismSpec.  # noqa: E501
        :type: int
        """

        self._data_local = data_local

    @property
    def data_rpc_port(self):
        """Gets the data_rpc_port of this V1alpha2ParallelismSpec.  # noqa: E501

        DataRPCPort is the data parallelism RPC port.  # noqa: E501

        :return: The data_rpc_port of this V1alpha2ParallelismSpec.  # noqa: E501
        :rtype: int
        """
        return self._data_rpc_port

    @data_rpc_port.setter
    def data_rpc_port(self, data_rpc_port):
        """Sets the data_rpc_port of this V1alpha2ParallelismSpec.

        DataRPCPort is the data parallelism RPC port.  # noqa: E501

        :param data_rpc_port: The data_rpc_port of this V1alpha2ParallelismSpec.  # noqa: E501
        :type: int
        """

        self._data_rpc_port = data_rpc_port

    @property
    def expert(self):
        """Gets the expert of this V1alpha2ParallelismSpec.  # noqa: E501

        Expert enables expert parallelism.  # noqa: E501

        :return: The expert of this V1alpha2ParallelismSpec.  # noqa: E501
        :rtype: bool
        """
        return self._expert

    @expert.setter
    def expert(self, expert):
        """Sets the expert of this V1alpha2ParallelismSpec.

        Expert enables expert parallelism.  # noqa: E501

        :param expert: The expert of this V1alpha2ParallelismSpec.  # noqa: E501
        :type: bool
        """

        self._expert = expert

    @property
    def pipeline(self):
        """Gets the pipeline of this V1alpha2ParallelismSpec.  # noqa: E501

        Pipeline parallelism size.  # noqa: E501

        :return: The pipeline of this V1alpha2ParallelismSpec.  # noqa: E501
        :rtype: int
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline):
        """Sets the pipeline of this V1alpha2ParallelismSpec.

        Pipeline parallelism size.  # noqa: E501

        :param pipeline: The pipeline of this V1alpha2ParallelismSpec.  # noqa: E501
        :type: int
        """

        self._pipeline = pipeline

    @property
    def tensor(self):
        """Gets the tensor of this V1alpha2ParallelismSpec.  # noqa: E501

        Tensor parallelism size.  # noqa: E501

        :return: The tensor of this V1alpha2ParallelismSpec.  # noqa: E501
        :rtype: int
        """
        return self._tensor

    @tensor.setter
    def tensor(self, tensor):
        """Sets the tensor of this V1alpha2ParallelismSpec.

        Tensor parallelism size.  # noqa: E501

        :param tensor: The tensor of this V1alpha2ParallelismSpec.  # noqa: E501
        :type: int
        """

        self._tensor = tensor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha2ParallelismSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha2ParallelismSpec):
            return True

        return self.to_dict() != other.to_dict()
