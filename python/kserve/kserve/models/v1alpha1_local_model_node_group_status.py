# Copyright 2023 The KServe Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    KServe

    Python SDK for KServe  # noqa: E501

    The version of the OpenAPI document: v0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kserve.configuration import Configuration


class V1alpha1LocalModelNodeGroupStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"available": "ResourceQuantity", "used": "ResourceQuantity"}

    attribute_map = {"available": "available", "used": "used"}

    def __init__(
        self, available=None, used=None, local_vars_configuration=None
    ):  # noqa: E501
        """V1alpha1LocalModelNodeGroupStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._available = None
        self._used = None
        self.discriminator = None

        if available is not None:
            self.available = available
        if used is not None:
            self.used = used

    @property
    def available(self):
        """Gets the available of this V1alpha1LocalModelNodeGroupStatus.  # noqa: E501


        :return: The available of this V1alpha1LocalModelNodeGroupStatus.  # noqa: E501
        :rtype: ResourceQuantity
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this V1alpha1LocalModelNodeGroupStatus.


        :param available: The available of this V1alpha1LocalModelNodeGroupStatus.  # noqa: E501
        :type: ResourceQuantity
        """

        self._available = available

    @property
    def used(self):
        """Gets the used of this V1alpha1LocalModelNodeGroupStatus.  # noqa: E501


        :return: The used of this V1alpha1LocalModelNodeGroupStatus.  # noqa: E501
        :rtype: ResourceQuantity
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this V1alpha1LocalModelNodeGroupStatus.


        :param used: The used of this V1alpha1LocalModelNodeGroupStatus.  # noqa: E501
        :type: ResourceQuantity
        """

        self._used = used

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict())
                            if hasattr(item[1], "to_dict")
                            else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1LocalModelNodeGroupStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1LocalModelNodeGroupStatus):
            return True

        return self.to_dict() != other.to_dict()
