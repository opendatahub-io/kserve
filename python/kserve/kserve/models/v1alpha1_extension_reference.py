# Copyright 2023 The KServe Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    KServe

    Python SDK for KServe  # noqa: E501

    The version of the OpenAPI document: v0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kserve.configuration import Configuration


class V1alpha1ExtensionReference(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'group': 'str',
        'kind': 'str',
        'name': 'str',
        'port_number': 'int'
    }

    attribute_map = {
        'group': 'group',
        'kind': 'kind',
        'name': 'name',
        'port_number': 'portNumber'
    }

    def __init__(self, group=None, kind=None, name='', port_number=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1ExtensionReference - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._group = None
        self._kind = None
        self._name = None
        self._port_number = None
        self.discriminator = None

        if group is not None:
            self.group = group
        if kind is not None:
            self.kind = kind
        if name is not None:
            self.name = name
        if port_number is not None:
            self.port_number = port_number

    @property
    def group(self):
        """Gets the group of this V1alpha1ExtensionReference.  # noqa: E501

        Group is the group of the referent. The default value is \"\", representing the Core API group.  # noqa: E501

        :return: The group of this V1alpha1ExtensionReference.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this V1alpha1ExtensionReference.

        Group is the group of the referent. The default value is \"\", representing the Core API group.  # noqa: E501

        :param group: The group of this V1alpha1ExtensionReference.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def kind(self):
        """Gets the kind of this V1alpha1ExtensionReference.  # noqa: E501

        Kind is the Kubernetes resource kind of the referent. For example \"Service\".  Defaults to \"Service\" when not specified.  ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations MUST NOT support ExternalName Services.  # noqa: E501

        :return: The kind of this V1alpha1ExtensionReference.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this V1alpha1ExtensionReference.

        Kind is the Kubernetes resource kind of the referent. For example \"Service\".  Defaults to \"Service\" when not specified.  ExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations MUST NOT support ExternalName Services.  # noqa: E501

        :param kind: The kind of this V1alpha1ExtensionReference.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this V1alpha1ExtensionReference.  # noqa: E501

        Name is the name of the referent.  # noqa: E501

        :return: The name of this V1alpha1ExtensionReference.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1alpha1ExtensionReference.

        Name is the name of the referent.  # noqa: E501

        :param name: The name of this V1alpha1ExtensionReference.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def port_number(self):
        """Gets the port_number of this V1alpha1ExtensionReference.  # noqa: E501

        The port number on the service running the extension. When unspecified, implementations SHOULD infer a default value of 9002 when the Kind is Service.  # noqa: E501

        :return: The port_number of this V1alpha1ExtensionReference.  # noqa: E501
        :rtype: int
        """
        return self._port_number

    @port_number.setter
    def port_number(self, port_number):
        """Sets the port_number of this V1alpha1ExtensionReference.

        The port number on the service running the extension. When unspecified, implementations SHOULD infer a default value of 9002 when the Kind is Service.  # noqa: E501

        :param port_number: The port_number of this V1alpha1ExtensionReference.  # noqa: E501
        :type: int
        """

        self._port_number = port_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1ExtensionReference):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1ExtensionReference):
            return True

        return self.to_dict() != other.to_dict()
