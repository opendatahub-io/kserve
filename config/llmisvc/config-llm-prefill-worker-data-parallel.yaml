apiVersion: serving.kserve.io/v1alpha1
kind: LLMInferenceServiceConfig
metadata:
  name: kserve-config-llm-prefill-worker-data-parallel
spec:
  prefill:
    template:
      containers:
        - image: ghcr.io/llm-d/llm-d-dev:v0.2.2
          imagePullPolicy: IfNotPresent
          name: main
          ports:
            - containerPort: 8000
              protocol: TCP
          command:
            - "/bin/bash"
            - "-c"
          args:
            - |-

              if [ "$KSERVE_INFER_ROCE" = "true" ]; then
                echo "Trying to infer RoCE configs ... "
                grep -H . /sys/class/infiniband/*/ports/*/gid_attrs/types/* 2>/dev/null
              
                KSERVE_INFER_IB_GID_INDEX_GREP=${KSERVE_INFER_IB_GID_INDEX_GREP:-"RoCE v2"}
                KSERVE_INFER_IB_GID_INDEX_INFINIBAND=${KSERVE_INFER_IB_GID_INDEX_INFINIBAND:-${NCCL_IB_HCA}}

                GID_DIR="/sys/class/infiniband/${KSERVE_INFER_IB_GID_INDEX_INFINIBAND}/ports/1"
                GID_INDEX=""
              
                # Prefer IPv4
                for tpath in ${GID_DIR}/gid_attrs/types/*; do
                  idx=$(basename "$tpath")
                  typ=$(cat "$tpath" 2>/dev/null || true)
                  if [ "$typ" = "${KSERVE_INFER_IB_GID_INDEX_GREP}" ]; then
                    gid=$(cat ${GID_DIR}/gids/$idx 2>/dev/null || true)
                    echo "[Infer RoCE] Evaluating ${tpath} with IP=${gid}"
                    if echo "$gid" | grep -q ':ffff:'; then
                      GID_INDEX="$idx"; break
                    fi
                  fi
                done
              
                # Pick the first one if IPv4 is not found
                if [ -z "$GID_INDEX" ]; then
                  echo "[Infer RoCE] No IPv4 GID_INDEX found for ${GID_DIR}, using the first one available ... "
                  GID_INDEX=$(grep -H . ${GID_DIR}/gid_attrs/types/* 2>/dev/null | grep "${KSERVE_INFER_IB_GID_INDEX_GREP}" | awk -F'[/:]' '{print $10; exit}')
                fi

                if [ -n "$GID_INDEX" ]; then
                  echo "[Infer RoCE] Setting inferred *_IB_GID_INDEX=${GID_INDEX}"
                  export NCCL_IB_GID_INDEX=${NCCL_IB_GID_INDEX:-$GID_INDEX}
                  export NVSHMEM_IB_GID_INDEX=${NVSHMEM_IB_GID_INDEX:-$GID_INDEX}
                  export UCX_IB_GID_INDEX=${UCX_IB_GID_INDEX:-$GID_INDEX}
                else
                  echo "[Infer RoCE] Skipping RoCE infer export, no GID_INDEX found."
                fi
              fi

              START_RANK=0
              eval "vllm serve \
                /mnt/models \
                --served-model-name "{{ .Spec.Model.Name }}" \
                --port 8000 \
                --api-server-count ${VLLM_API_SERVER_COUNT:-8} \
                --disable-log-requests \
                {{- if .Spec.Prefill.Parallelism.Expert -}}--enable-expert-parallel{{- end }} \
                {{- if .Spec.Prefill.Parallelism.Tensor -}}--tensor-parallel-size {{ .Spec.Prefill.Parallelism.Tensor }}{{- end }} \
                --data-parallel-size {{ or .Spec.Prefill.Parallelism.Data 1 }} \
                --data-parallel-size-local {{ or .Spec.Prefill.Parallelism.DataLocal 1 }} \
                --data-parallel-address $(LWS_LEADER_ADDRESS) \
                --data-parallel-rpc-port {{ if .Spec.Prefill.Parallelism.DataRPCPort }}{{ .Spec.Prefill.Parallelism.DataRPCPort }}{{ else }}5555{{- end }} \
                --data-parallel-start-rank $START_RANK \
                ${VLLM_ADDITIONAL_ARGS} \
                --trust-remote-code \
                --enable-ssl-refresh \
                --ssl-certfile \
                /etc/ssl/certs/tls.crt \
                --ssl-keyfile \
                /etc/ssl/certs/tls.key"
          env:
            - name: HOME
              value: /home
            - name: VLLM_LOGGING_LEVEL
              value: INFO
            - name: HF_HUB_CACHE
              value: /models
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            capabilities:
              add:
                - "IPC_LOCK"
                - "SYS_RAWIO"
                - "NET_RAW"
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
              scheme: HTTPS
            initialDelaySeconds: 300
            periodSeconds: 10
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
              scheme: HTTPS
            initialDelaySeconds: 200
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 60
          volumeMounts:
            - mountPath: /home
              name: home
            - mountPath: /dev/shm
              name: dshm
            - mountPath: /models
              name: model-cache
            - mountPath: /etc/ssl/certs
              name: tls-certs
              readOnly: true
      terminationGracePeriodSeconds: 30
      volumes:
        - emptyDir: { }
          name: home
        - emptyDir:
            medium: Memory
            sizeLimit: 1Gi
          name: dshm
        - emptyDir: { }
          name: model-cache
        - name: tls-certs
          secret:
            secretName: "{{ ChildName .ObjectMeta.Name `-kserve-self-signed-certs` }}"
    worker:
      containers:
        - image: ghcr.io/llm-d/llm-d-dev:v0.2.2
          imagePullPolicy: IfNotPresent
          name: main
          ports:
            - containerPort: 8000
              protocol: TCP
          command:
            - "/bin/bash"
            - "-c"
          args:
            - |-

              if [ "$KSERVE_INFER_ROCE" = "true" ]; then
                echo "Trying to infer RoCE configs ... "
                grep -H . /sys/class/infiniband/*/ports/*/gid_attrs/types/* 2>/dev/null
              
                KSERVE_INFER_IB_GID_INDEX_GREP=${KSERVE_INFER_IB_GID_INDEX_GREP:-"RoCE v2"}
                KSERVE_INFER_IB_GID_INDEX_INFINIBAND=${KSERVE_INFER_IB_GID_INDEX_INFINIBAND:-${NCCL_IB_HCA}}

                GID_DIR="/sys/class/infiniband/${KSERVE_INFER_IB_GID_INDEX_INFINIBAND}/ports/1"
                GID_INDEX=""
              
                # Prefer IPv4
                for tpath in ${GID_DIR}/gid_attrs/types/*; do
                  idx=$(basename "$tpath")
                  typ=$(cat "$tpath" 2>/dev/null || true)
                  if [ "$typ" = "${KSERVE_INFER_IB_GID_INDEX_GREP}" ]; then
                    gid=$(cat ${GID_DIR}/gids/$idx 2>/dev/null || true)
                    echo "[Infer RoCE] Evaluating ${tpath} with IP=${gid}"
                    if echo "$gid" | grep -q ':ffff:'; then
                      GID_INDEX="$idx"; break
                    fi
                  fi
                done
              
                # Pick the first one if IPv4 is not found
                if [ -z "$GID_INDEX" ]; then
                  echo "[Infer RoCE] No IPv4 GID_INDEX found for ${GID_DIR}, using the first one available ... "
                  GID_INDEX=$(grep -H . ${GID_DIR}/gid_attrs/types/* 2>/dev/null | grep "${KSERVE_INFER_IB_GID_INDEX_GREP}" | awk -F'[/:]' '{print $10; exit}')
                fi

                if [ -n "$GID_INDEX" ]; then
                  echo "[Infer RoCE] Setting inferred *_IB_GID_INDEX=${GID_INDEX}"
                  export NCCL_IB_GID_INDEX=${NCCL_IB_GID_INDEX:-$GID_INDEX}
                  export NVSHMEM_IB_GID_INDEX=${NVSHMEM_IB_GID_INDEX:-$GID_INDEX}
                  export UCX_IB_GID_INDEX=${UCX_IB_GID_INDEX:-$GID_INDEX}
                else
                  echo "[Infer RoCE] Skipping RoCE infer export, no GID_INDEX found."
                fi
              fi

              START_RANK=$(( ${LWS_WORKER_INDEX:-0} * {{ or .Spec.Prefill.Parallelism.DataLocal 1 }} ))
              eval "vllm serve \
                /mnt/models \
                --served-model-name "{{ .Spec.Model.Name }}" \
                --port 8000 \
                --disable-log-requests \
                {{- if .Spec.Prefill.Parallelism.Expert }}--enable-expert-parallel{{- end }} \
                {{- if .Spec.Prefill.Parallelism.Tensor }}--tensor-parallel-size {{ .Spec.Prefill.Parallelism.Tensor }}{{- end }} \
                --data-parallel-size {{ or .Spec.Prefill.Parallelism.Data 1 }} \
                --data-parallel-size-local {{ or .Spec.Prefill.Parallelism.DataLocal 1 }} \
                --data-parallel-address $(LWS_LEADER_ADDRESS) \
                --data-parallel-rpc-port {{ if .Spec.Prefill.Parallelism.DataRPCPort }}{{ .Spec.Prefill.Parallelism.DataRPCPort }}{{ else }}5555{{- end }} \
                --data-parallel-start-rank $START_RANK \
                ${VLLM_ADDITIONAL_ARGS} \
                --trust-remote-code \
                --headless \
                --enable-ssl-refresh \
                --ssl-certfile \
                /etc/ssl/certs/tls.crt \
                --ssl-keyfile \
                /etc/ssl/certs/tls.key"
          env:
            - name: HOME
              value: /home
            - name: VLLM_LOGGING_LEVEL
              value: INFO
            - name: HF_HUB_CACHE
              value: /models
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            capabilities:
              add:
                - "IPC_LOCK"
                - "SYS_RAWIO"
                - "NET_RAW"
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /home
              name: home
            - mountPath: /dev/shm
              name: dshm
            - mountPath: /models
              name: model-cache
            - mountPath: /etc/ssl/certs
              name: tls-certs
              readOnly: true
      terminationGracePeriodSeconds: 30
      volumes:
        - emptyDir: { }
          name: home
        - emptyDir:
            medium: Memory
            sizeLimit: 1Gi
          name: dshm
        - emptyDir: { }
          name: model-cache
        - name: tls-certs
          secret:
            secretName: "{{ ChildName .ObjectMeta.Name `-kserve-self-signed-certs` }}"
